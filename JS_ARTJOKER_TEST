function PromoCode() {
  ///////////////////////////////// Создаю который зацикливаю в случаи некоректного ввода

  function AskPromo() {
    for (let a = 0; a < 1; a++) {
      let promoCode = +prompt('Введите код');

      if (isNaN(promoCode)) {
        alert('Вы ввели не числов');
        a--;
      } else if (!promoCode) {
        alert('Вы ничего не ввели');
        a--;
      } else {
        countDigits(promoCode);
      }
    }
  }

  function countDigits(promoCode) {
    ///////////////////////////////////////////////////// Разбиваю значения prompt на отдельные цифры и проверяю на кол-во символов
    function numDigits(promoCode) {
      return Math.max(Math.floor(Math.log10(Math.abs(promoCode))), 0) + 1;
    }

    if (numDigits(promoCode) < 8) {
      alert('Вы ввели менее 8 символов');
      AskPromo();
    } else {
      CreateArrNum(promoCode);
    }
  }

  ////////////////////////////////////////// Создаю массив из отдельных чисел

  function CreateArrNum(number) {
    output = [];

    while (number) {
      output.push(number % 10);
      number = Math.floor(number / 10);
    }
    output.reverse();

    FinallyResult(output);
  }

  ////////////////////////////////////// Создаю отдельную функцию которая будет проверять все исходы и последовательности

  function FinallyResult(output) {
    /// Функция проверяет отношение кратных чисел к некратным
    function SumEvenOdds(output) {
      let sumEven = 0;
      let sumOdd = 0;

      for (let a = 0; a < output.length; a++) {
        if (output[a] % 2) {
          sumEven += output[a];
        } else {
          sumOdd += output[a];
        }
      }

      if (sumEven > sumOdd) {
        return false;
      } else {
        return true;
      }
    }

    /// Функция проверяет что пара значений идет последовательно по возрастанию

    function VerifCequence(output) {
      if (
        (output[0] < output[1] && output[4] < output[5]) ||
        (output[2] < output[3] && output[6] < output[7])
      ) {
        return true;
      }
      return false;
    }

    // Настаиваю, что в функции ниже нету проведения к строке. join - функциональный метод массива, который возвращает строку, далее идет приведение к Числу, что не запрещено по условию
    // Функция здесь создает массив из пар и проверяет данный массив кратность/ некратность

    function CheckEvenOddEntries(output) {
      let arrOfPair = [
        Number(output.slice(0, 2).join('')),
        Number(output.slice(2, 4).join('')),
        Number(output.slice(4, 6).join('')),
        Number(output.slice(6, 8).join('')),
      ];

      if (
        (arrOfPair[0] % 2 && arrOfPair[2] % 2) ||
        (arrOfPair[1] % 2 && arrOfPair[3] % 2)
      ) {
        return true;
      }
      return false;
    }

    //////////////Делаю проверки на основании функций, которые описал выше

    if (CheckEvenOddEntries(output) && VerifCequence(output)) {
      alert('2000');
    } else if (CheckEvenOddEntries(output) && !VerifCequence(output)) {
      alert('1000');
    } else if (
      !CheckEvenOddEntries(output) &&
      !VerifCequence(output) &&
      SumEvenOdds(output)
    ) {
      alert('100');
    } else {
      alert('0');
    }
  }

  AskPromo();
}

PromoCode();
